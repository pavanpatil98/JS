//Advanced JS

// var old JS meln tha
// var function scoped hota hai => var apne parent fnc
//mein kahi bhi use ho sakta hai
//var adds itself to the window object

//let const new js mein hai
//let const braces scoped hota hai
//let const doesn't adds itself to window object

// To explain window object point
/*js language mein kuchh cheeje nahi hai jo hum use kar
sakte hai aur wo cheeje hume js se nahi balki broser
se milti hai, aise saare features jo js ka part nahi
hai but fir bhi use kar sakte hai unhe hum dhoond
sakte hai ek particular object mein jiska naam hai
window*/
//Like alert,prompt setTimeout is provided by window object

/*js mein kai saare features hai par kuchh features jo
hum use karte hai wo features wo nahi hai par fir bhi
use kar paate hai kyoki wo features js langauge use kar
leti hai window se, aur window hai ek box of features
given by browser to use with js*/

//Browser Context API
/*
1.Window Object(Set of features browser gives to us)
2.Stack
3.Heap Memory
*/

//Stack
// Use to store primitive data's 

//Excecution Context 
/* execution context matlab jab bhi hum function
chalaayege fnc apna ek khudka ek imaginary container
bana lega jismein uski teen cheeje hogi
 1) variables
 2) functions inside that parent fnc
 3) lexical environment of that function
  ye jp container hai imaginary ise hi hum execution context kahte
 hai
 */


//Lexical Enviroment
// So it is part of execution context & as var's are function scopred it is used to keep track of where the var's are accesible & where they are not.
/*
Example
function test(){
  var a = "Pavan";
  function def(){
    var b = "Patil"
  }
}
/*Now here we have a & b
So b is accessible in def() but a is not accessible in test()
Similarly a is accessible in test() & accessible in def()
so lexical env is nothing but this thing which keeps tracks of acessiblity of vars in diffrent functions.
*/

//How to copy refrence values
//Problem
var testArr = [1,2,3,4,5];
var b = testArr;
b.pop();
console.log(testArr);
console.log(b);
//Here as ref is passed on so both testArr & b are hampered.

//So this is the way to copy the values (not reference)
var testArrP = [1,2,3,4,5];
var testArrQ = [...testArrP];
console.log(testArrP);
console.log(testArrQ);

//Same can be done for objects
var testObj = {name:"Pavan",age:22};
var ntestObj = {...testObj};
ntestObj.name = "Praveen";
console.log(testObj);
console.log(ntestObj);


//Truthy & Falsy
/*js mein kuchh bhi likho wo mainly do prakaar mein se kisi ek
prakaar ko belong karti hai
// falsy values ye hai = 0, false, undefined, null, NaN, document. all
// truthy values = all others
*/


//for each loop

var a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];

//To loop over arrays use hota hai
a.forEach(function (val) {
  val = val * val;
  console.log(val);
});

console.log(a);

//To loop over objects use hota hai
var obj = {
  name: "Pavan",
  age: 26,
  city: "Dhule",
};

for(var key in obj){
  console.log(key, obj[key]);
}

//Callback functions
//jab be kooi aisa code jo baad mein chalta hai aap likhoge, kyuki wo code baad me chalta hai jsko pta nhi hota ke wo complete hua ya nhai aise code ke completion par js ko bataya jata hai ki wo complete hogya aur app usse chlaa sakte ho, yeh btane ke kaam callback ka hai

//aisa code jo baad mein chalta hai use hum ek function de dete hai ke bhaiya jab complete ho jaana to yeh function chala dena, aur woh function jo hum dete hai wo ek normal function hota hai aur use kehte hai callback function

//Example
setTimeout(function(){
  console.log("Payment Successful")
},2000)


//First Class Functions
//This is a concept hai jiska matlab hota hai ki aap function ko use kar skte ho as a value

function Test(a){
  a();
}
Test(function(){console.log("Hello Pavan")});

//How arrays are stored in behind the scenes

var arr = [22,32,34,72,54];

//This way array is stored in background Arrays is nothing but object only

arr = {
  0:22,
  1:32,
  2:34,
  3:72,
  4:54
}

console.log(typeof([])+"-----"+typeof({}));

//So to know if we are working with object type or array type we can use Array.isArray()

console.log(Array.isArray([])+"-----"+Array.isArray({}));

//Deleting objects props
var testObj = {
  name : "Pavan",
  age : 24,
  city : "Dhule"
}

console.log(testObj);
delete testObj.city;
console.log(testObj);
delete testObj.name;
console.log(testObj);
